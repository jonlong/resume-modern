---
import Job from "../components/Job.astro";
import Position from "../components/Position.astro";
import Affiliation from "../components/Affiliation.astro";
import Section from "../components/Section.astro";
import Prose from "../components/Prose.astro";
import Link from "../components/Link.astro";
import {Content as Profile} from '../entries/profile.md';

// import type { MarkdownInstance } from 'astro'

export interface Jobs {
  // details: MarkdownInstance<Record<string, any>>;
  // positions: MarkdownInstance<Record<string, any>>[];
  // TODO: waiting on https://github.com/withastro/astro/pull/3503 to be released to fix this
  details: any;
  positions: any[];
}

const jobs = await Astro.glob("../entries/jobs/*.md");
const companies = await Astro.glob("../entries/companies/*.md");
const affiliations = await Astro.glob("../entries/affiliations/*.md");

const jobsByCompany =
companies.reduce((acc, element) => {
  return {
    ...acc,
    [element.frontmatter.id]: {
      details: element,
      positions: jobs.filter(job => job.frontmatter.orgId === element.frontmatter.id)
    }
  }
}, {});

const sortedJobs = Object.values(jobsByCompany)

sortedJobs.forEach(
  (job: Jobs) => job.positions
    .sort((a, b) =>
      Date.parse(b.frontmatter.endDatetime) -
      Date.parse(a.frontmatter.endDatetime)
    )
)

sortedJobs.sort((a: Jobs, b: Jobs) => {
  const aEndDate = a.positions[0].frontmatter.endDatetime
  const bEndDate = b.positions[0].frontmatter.endDatetime

  return !aEndDate ? -1 : Date.parse(bEndDate) - Date.parse(aEndDate)
})
---

<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="description" content="Jon Long — Résumé" />
    <meta name="author" content="Jon Long" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="robots" content="noindex, nofollow, noarchive" />
    <title>Jon Long — Résumé</title>

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600;700&display=swap"
      rel="stylesheet"
    />

    <style>
      @media print {
        @page {
          size: letter;
          margin: .25in 0;
        }
        html {
          font-size: 11px;
        }
      }
    </style>
  </head>
  <body>
    <div class="max-w-letter p-6 mx-auto">
      <header class="mb-6">
        <h1
          class="text-4xl sm:text-5xl font-display text-gray-700 tracking-tighter font-bold mb-2"
        >
          Jon Long
        </h1>
        <ul class="sm:flex sm:divide-x flex-wrap text-sm sm:text-base text-gray-500 -ml-4">
          <li class="px-4">Philadelphia, PA</li>
          <li class="px-4">
            <Link url="mailto:jon@linesandwaves.com">jon@linesandwaves.com</Link>
          </li>
          <li class="px-4">
            <Link url="tel:+2023405408">202-340-5408</Link>
          </li>
          <li class="px-4">
            <Link url="https://portfolio.linesandwaves.com">portfolio.linesandwaves.com</Link>
          </li>
        </ul>
      </header>

      <main>
				<Section title="Profile">
          <div class="flex">
            <Prose class="prose- sm:w-3/4 sm:ml-auto">
              <Profile />
            </Prose>
          </div>
				</Section>

        <Section title="Work Experience">
          {
            sortedJobs.map((job: Jobs) => {
              const { details, positions } = job
              const {
                name,
                linkUrl,
              } = details.frontmatter

              return <Job
									organization={name}
									linkUrl={linkUrl}
								>
                  <details.Content slot="description" />
                  <Fragment slot="positions">
                    {positions.map(
                      job => (
                        <Position
                          role={job.frontmatter.role}
                          startDatetime={job.frontmatter.startDatetime}
                          startDateHuman={job.frontmatter.startDateHuman}
                          endDatetime={job.frontmatter.endDatetime}
                          endDateHuman={job.frontmatter.endDateHuman}
                        >
                          <job.Content />
                        </Position>
                      )
                    )}
                  </Fragment>
								</Job>
            })
					}
        </Section>

        <Section class="break-inside-avoid" title="Education">
          <div class="flex">
            <div class="sm:w-3/4 sm:ml-auto">
              <h3 class="text-lg text-gray-700 font-semibold pr-4">
                James Madison University
              </h3>
              <p class="text-slate-700 pr-4">B.A. Media Art and Design, concentration in Interactive Media</p>
              <p class="mt-0.5 text-slate-500 italic">
                <time datetime="2001">2001</time> — <time datetime="2005">2005</time>
              </p>
            </div>
          </div>
				</Section>

        <Section title="Affiliations">
          <div class="sm:flex">
            {
              affiliations.map(
                affiliation => (
                  <Affiliation
                    organization={affiliation.frontmatter.organization}
                    linkUrl={affiliation.frontmatter.linkUrl}
                    class="sm:w-1/3 pr-6 last-child:pr-0"
                    role={affiliation.frontmatter.role}
                  >
                    <affiliation.Content />
                  </Affiliation>
                )
              )
            }
          </div>
        </Section>
      </main>
    </div>
  </body>
</html>
